// Â© 2023 SolarWinds Worldwide, LLC. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import collector "github.com/solarwinds/apm-proto/go/collectorpb"

// FIX: gRPC generated file use x/net/context - import context "context"
import "context"
import "google.golang.org/grpc"
import "github.com/stretchr/testify/mock"

// TraceCollectorClient is an autogenerated mock type for the TraceCollectorClient type
type TraceCollectorClient struct {
	mock.Mock
}

// GetSettings provides a mock function with given fields: ctx, in, opts
func (_m *TraceCollectorClient) GetSettings(ctx context.Context, in *collector.SettingsRequest, opts ...grpc.CallOption) (*collector.SettingsResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *collector.SettingsResult
	if rf, ok := ret.Get(0).(func(context.Context, *collector.SettingsRequest, ...grpc.CallOption) *collector.SettingsResult); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*collector.SettingsResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *collector.SettingsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx, in, opts
func (_m *TraceCollectorClient) Ping(ctx context.Context, in *collector.PingRequest, opts ...grpc.CallOption) (*collector.MessageResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *collector.MessageResult
	if rf, ok := ret.Get(0).(func(context.Context, *collector.PingRequest, ...grpc.CallOption) *collector.MessageResult); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*collector.MessageResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *collector.PingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostEvents provides a mock function with given fields: ctx, in, opts
func (_m *TraceCollectorClient) PostEvents(ctx context.Context, in *collector.MessageRequest, opts ...grpc.CallOption) (*collector.MessageResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *collector.MessageResult
	if rf, ok := ret.Get(0).(func(context.Context, *collector.MessageRequest, ...grpc.CallOption) *collector.MessageResult); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*collector.MessageResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *collector.MessageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostMetrics provides a mock function with given fields: ctx, in, opts
func (_m *TraceCollectorClient) PostMetrics(ctx context.Context, in *collector.MessageRequest, opts ...grpc.CallOption) (*collector.MessageResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *collector.MessageResult
	if rf, ok := ret.Get(0).(func(context.Context, *collector.MessageRequest, ...grpc.CallOption) *collector.MessageResult); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*collector.MessageResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *collector.MessageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostStatus provides a mock function with given fields: ctx, in, opts
func (_m *TraceCollectorClient) PostStatus(ctx context.Context, in *collector.MessageRequest, opts ...grpc.CallOption) (*collector.MessageResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *collector.MessageResult
	if rf, ok := ret.Get(0).(func(context.Context, *collector.MessageRequest, ...grpc.CallOption) *collector.MessageResult); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*collector.MessageResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *collector.MessageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
